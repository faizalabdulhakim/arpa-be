// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PROCESSING
  SHIPPED
  DELIVERED
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  orders    Order[]
  shoppingCarts ShoppingCart[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Int
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  categories  ProductsOnCategories[]
  orders      ProductsOnOrders[]
  shoppingCarts ShoppingCart[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  products  ProductsOnCategories[]
}

model ProductsOnCategories {
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([product_id, category_id])
}

model Order {
  id          String @id @default(uuid())
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  total_price Int
  status      Status @default(PROCESSING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  products    ProductsOnOrders[]
}

model ProductsOnOrders {
  order Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id          String
  product Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id        String
  quantity          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  @@id([order_id, product_id])
}

model ShoppingCart {
  user User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id      String
  quantity        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@id([user_id, product_id])
}